#!/bin/bash
##############################################################################################
### Pseudomonas veronii Pvy genome assembly and error correction pipeline                  ###
###											                                               ### 
### Jakub Ridl, Laboratory of Genomics and Bioinformatics, Institute of Molecular Genetics ###
### CAS CR, Prague, Czech Republic                                                         ###
### &                                                                                      ###
### Dept. of Zoology, Faculty of Science, Charles University in Prague, Czech Republic     ###
###                                                                                        ###
### The genome sequences are available from GenBank, accesion numbers CP039631-CP039632    ###
##############################################################################################


### Assembly of Oxford nanopore reads in fastq file using Canu software
# Canu assembler available at: https://github.com/marbl/canu

canu \
	-p P_veronii_Pvy_nanopore_canu_assembly \
	-d P_veronii_Pvy_nanopore_canu_assembly_directory \
	genomeSize=7m \
	-nanopore-raw P_veronii_Pvy_nanopore_reads.fastq


### Error correction of the canu assembly by running Racon software twice in a row
# Racon available at: https://github.com/isovic/racon

## First run of the Racon correction

# Mapping nanopore reads onto the assembly using minimap2 software
# minimap2 available at: https://github.com/lh3/minimap2

minimap2 \
	-ax map-ont \
	P_veronii_Pvy_nanopore_canu_assembly_directory/P_veronii_Pvy_nanopore_canu_assembly.contigs.fasta \
	P_veronii_pvy_nanopore_reads.fastq \
	> P_veronii_Pvy_nanopore_reads_vs_canu_assembly_minimap2_1.sam

# Running the first round of Racon using the SAM alignment file from minimap2

racon \
	P_veronii_Pvy_nanopore_reads.fastq \
	P_veronii_Pvy_nanopore_reads_vs_canu_assembly_minimap2_1.sam \
	P_veronii_Pvy_nanopore_canu_assembly_directory/P_veronii_Pvy_nanopore_canu_assembly.contigs.fasta \
	> P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_1.fasta

## Second run of the Racon correction

# Mapping nanopore reads onto the corrected assembly using minimap2 software

minimap2 \
	-ax map-ont \
	P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_1.fasta \
	P_veronii_pvy_nanopore_reads.fastq \
	> P_veronii_Pvy_nanopore_reads_vs_canu_assembly_minimap2_2.sam

# Runnig the second round of Racon using the SAM alignment file from minimap2

racon \
	P_veronii_Pvy_nanopore_reads.fastq \
	P_veronii_Pvy_nanopore_reads_vs_canu_assembly_minimap2_2.sam \
	P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_1.fasta \
	> P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2.fasta

### Error correction of the Racon corrected assembly by running Nanopolish software twice in a row
# Nanopolish available at: https://github.com/jts/nanopolish

## Indexing fast5 files generated by Oxford nanopore instrument together with the nanopore reads

nanopolish index \
	-d P_veronii_Pvy_nanopore_fast5_files_directory \
	P_veronii_pvy_nanopore_reads.fastq
	
## First run of the Nanopolish correction

# Mapping nanopore reads onto the Racon corrected assembly using BWA package
# BWA available at: https://github.com/lh3/bwa

# Indexing the reference assembly

bwa index \
	P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2.fasta

# Mapping the nanopore reads onto the indexed assembly followed by Samtools software to generate alignment file in BAM format
# Samtools available at: http://www.htslib.org/
 
bwa mem \
	-x ont2d \
	P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2.fasta \
	P_veronii_pvy_nanopore_reads.fastq | \
	samtools sort \
		-o P_veronii_pvy_nanopore_reads_vs_canu_assembly_racon_2_bwa_1.bam \
		-T samtools_temp_files.tmp

# Running the first round of Nanopolish correction in 50kb blocks generated by Nanopolish python script nanopolish_makerange.py using paralell software to use 50 CPU cores
# Paralell available at: https://www.gnu.org/software/parallel/

python \
	/path/to/nanopolish_makerange.py \
	P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2.fasta | \
	paralell \
		--results nanopolish.results \
		-P 50 \
		nanopolish variants \
			--consensus \
			-o nanopolish_1_50kb_blocks.{1}.vcf \
			-w {1} \
			-t 50 \
			--fix-homopolymers \
			--min-candidate-frequency 0.1 \
			-r P_veronii_pvy_nanopore_reads.fastq \
			-b P_veronii_pvy_nanopore_reads_vs_canu_assembly_racon_2_bwa_1.bam \
			-g P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2.fasta
	
# Generating the corrected assembly sequence from polished 50kb blocks

nanopolish vcf2fasta \
	-g P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2.fasta \
	nanopolish_1_50kb_blocks.*.vcf \
	> P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2_nanopolish_1.fasta

## Second run of the Nanopolish correction

# Mapping nanopore reads onto the Racon corrected assembly using BWA package

# Indexing the reference assembly

bwa index \
	P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2_nanopolish_1.fasta

# Mapping the nanopore reads onto the indexed assembly followed by Samtools software to generate alignment file in BAM format
 
bwa mem \
	-x ont2d \
	P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2_nanopolish_1.fasta \
	P_veronii_pvy_nanopore_reads.fastq | \
	samtools sort \
		-o P_veronii_pvy_nanopore_reads_vs_canu_assembly_racon_2_bwa_2.bam \
		-T samtools_temp_files.tmp

# Running the secound round of Nanopolish correction in 50kb blocks generated by Nanopolish python script nanopolish_makerange.py using paralell software to use 50 CPU cores

python \
	/path/to/nanopolish_makerange.py \
	P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2_nanopolish_1.fasta | \
	paralell \
		--results nanopolish.results \
		-P 50 \
		nanopolish variants \
			--consensus \
			-o nanopolish_2_50kb_blocks.{1}.vcf \
			-w {1} \
			-t 50 \
			--fix-homopolymers \
			--min-candidate-frequency 0.1 \
			-r P_veronii_pvy_nanopore_reads.fastq \
			-b P_veronii_pvy_nanopore_reads_vs_canu_assembly_racon_2_bwa_2.bam \
			-g P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2_nanopolish_1.fasta
	
# Generating the final corrected assembly sequence from polished 50kb blocks

nanopolish vcf2fasta \
	-g P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2_nanopolish_1.fasta \
	nanopolish_2_50kb_blocks.*.vcf \
	> P_veronii_Pvy_nanopore_canu_assembly.contigs_racon_2_nanopolish_2.fasta
